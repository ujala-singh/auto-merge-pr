name: Auto Merge Approved PR

on:
  pull_request_review:
    types:
      - submitted

jobs:
  auto_merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'main'
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_PAT }}
          fetch-depth: 0

      - name: Check GitHub CLI version
        run: gh --version

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Add Approved label
        run: |
          pr_number=$(gh pr view ${{ github.event.pull_request.number }} --json number --jq '.number')
          gh pr edit $pr_number --add-label "approved"
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}

      - name: Auto Merge Approved PR
        run: |
          pr_number=${{ github.event.pull_request.number }}
          review_users=$(gh pr view ${pr_number} --json reviews | jq -r '.reviews[].author.login')
          # Fetch CODEOWNERS file content
          CODEOWNERS_CONTENT=$(curl -s "https://api.github.com/repos${{ github.owner }}/${{ github.repository }}/contents/.github/CODEOWNERS" | jq -r '.content' | base64 -d)

          if [[ -n "$review_users" ]]; then
            for user in $review_users; do
              echo "Checking code owner for reviewer: $user"
              # Check if the reviewer is a code owner
              if echo "$CODEOWNERS_CONTENT" | grep -q "$user"; then
                echo "PR has been approved by code owner, merging..."
                gh pr merge $pr_number --auto --squash --delete-branch
                break  # Exit the loop if any reviewer is a code owner
              else
                echo "Reviewer $user is not a code owner."
              fi
            done
          fi
      
      - name: Rebase "staging" onto "main"
        run: |
          git checkout staging
          git rebase main
          git push origin staging --force
 
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}

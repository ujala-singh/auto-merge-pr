name: Create Main Branch PR

on:
  pull_request:
    types:
      - closed

jobs:
  create_main_branch_pr:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'staging' }}
    steps:
      - name: Debugging
        run: |
          echo "Merged: ${{ github.event.pull_request.merged }}"
          echo "Base Ref: ${{ github.event.pull_request.base.ref }}"

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_PAT }}
          fetch-depth: 0

      - name: Check GitHub CLI version
        run: gh --version
      
      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Fetch latest changes
        run: git fetch origin

      - name: Pull latest changes
        run: |
          git checkout staging
          git pull origin staging
          git checkout main
          git pull origin main

      - name: Create Main Branch PR
        run: |
          echo "Starting workflow..."
          # Extract the PR number from the merged pull request
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          echo "PR_NUMBER: $PR_NUMBER"

          # Switch to the 'main' branch
          git checkout main
          
          # Create a new branch for the main branch, including the PR number
          git checkout -b main-branch-update-from-staging-pr-${PR_NUMBER} origin/main

          # Fetch the changes from the 'staging' branch
          echo "Fetching changes from 'staging'..."
          git fetch origin staging:staging

          # Merge 'staging' into the new branch
          echo "Merging changes from 'staging' into the new branch..."
          # Temporarily checkout 'staging' excluding values.yaml
          git checkout staging -- ':!values.yaml'

          # Commit the merged changes
          git commit -m "Merge changes from 'staging' (PR #$PR_NUMBER)"
          
          # Push the changes to the repository
          echo "Pushing the changes to main-branch-update-from-staging-pr-${PR_NUMBER}..."
          git push origin main-branch-update-from-staging-pr-${PR_NUMBER}
          
          # Create a pull request with the PR number in the title
          echo "Creating the PR to main branch with branch name as main-branch-update-from-staging-pr-${PR_NUMBER}..."
          gh pr create --base main --head main-branch-update-from-staging-pr-${PR_NUMBER} --title "Merge changes from 'staging' to 'main' (PR #$PR_NUMBER)" --body "## Change Summary

          Summarise your changes in points

          - This PR includes changes from staging PR: $PR_URL"
          -
          -

          ## Type of change

          - [ ] Bug fix (non-breaking change which fixes an issue)
          - [ ] New feature (non-breaking change which adds functionality)
          - [ ] Code refactoring (restructing existing code without changing any functionality)
          - [ ] This change requires a documentation update

          ## Documentation/Release Plan

          - [Problem Statement doc]()
          - [Feature documentation]()
          - [Release plan]()

          ## Testing Checklist

          Changes tested on
          - [ ] development
          - [ ] production
          - [ ] [MABL Tests Link]() (if any)
          - [ ] [Successful Workflow Links]() (if any)
          
          ---"
          echo "Workflow completed successfully."
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}
